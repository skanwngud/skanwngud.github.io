[
  
  {
    "title": "컴퓨터 구조 (1)",
    "url": "/posts/computer-structure-1/",
    "categories": "Computer Sience",
    "tags": "",
    "date": "2023-03-13 00:00:00 +0900",
    





    
    "snippet": "컴퓨터 내부의 언어 체계  언어란? 기호의 집합으로 인코딩encoding 된 것을 당사자들간 모두 같은 문맥context 로 의사소통하는 것비트bit  binary + digit 의 합성어  0, 1 을 나타내는 이진법 사용  기호는 주관적이므로 켜짐 / 꺼짐, 낮 / 밤 등이 될 수 있다논리연산logical operation  다른 비트들이 표현하는...",
    "content": "컴퓨터 내부의 언어 체계  언어란? 기호의 집합으로 인코딩encoding 된 것을 당사자들간 모두 같은 문맥context 로 의사소통하는 것비트bit  binary + digit 의 합성어  0, 1 을 나타내는 이진법 사용  기호는 주관적이므로 켜짐 / 꺼짐, 낮 / 밤 등이 될 수 있다논리연산logical operation  다른 비트들이 표현하는 내용으로부터 새로운 비트를 만들어내는 동작불리언 대수boolean  비트에 사용할 수 있는 연산 규칙의 집합      일반 대수와 마찬가지로 결합 법칙, 교환 법칙, 분배 법칙 등을 적용 가능    NOT: 논리적 반대를 의미, 참 -&gt; 거짓, 거짓 -&gt; 참으로 연산  AND: 둘 이상의 비트에 작용          연산의 대상이 되는 비트 참 인 경우에만 참        OR: 둘 이상의 비트에 작용          연산의 대상이 되는 비트 중 하나라도 참인 경우에 참        XOR (ExclusiveOR): 둘 이상의 비트에 작용          연산이 되는 대상의 비트 중 하나 이상의 비트가 참일 때 참      연산이 되는 대상의 비트 중 모든 비트가 참인 경우엔 거짓        XOR 연산은 (a OR b) AND (NOT(a AND b)) 로 만들 수 있다드모르간의 법칙  불리언 대수에 적용할 수 있는 법칙            a      b      a AND b      NOT a      NOT b      NOT a OR NOT b      NOT (NOT a OR NOT b)                  F      F      F      T      T      T      F              F      T      F      T      F      T      F              T      F      F      F      T      T      F              T      T      T      F      F      F      T      위 표에서 봤을 때 AND 연산 또한 NOT 과 OR 을 이용해 만들 수 있다드모르간 법칙은 입력받은 비트의 연산을 최소화하기 위해서 사용될 수 있다"
  },
  
  {
    "title": "우분투 환경 세팅 (3)",
    "url": "/posts/ubuntu-env-setting-3/",
    "categories": "Ubuntu, Git, VScodeß",
    "tags": "ubuntu, git, vscode",
    "date": "2023-03-12 00:00:00 +0900",
    





    
    "snippet": "설치 환경  Geforece 3090  Ubuntu 20.04 LTSGit 설치sudo apt-get install git 명령어로 설치 가능하다git --version 혹은 git -V 으로 설치 여부를 확인한 뒤 git config 명령어로 설정을 완료한다git config --user.name {user_name}git config --user....",
    "content": "설치 환경  Geforece 3090  Ubuntu 20.04 LTSGit 설치sudo apt-get install git 명령어로 설치 가능하다git --version 혹은 git -V 으로 설치 여부를 확인한 뒤 git config 명령어로 설정을 완료한다git config --user.name {user_name}git config --user.email {user_email}git config --list마지막 줄 명령어로 입력한 config 가 제대로 적용 되었는지 확인한다VScode 설치VScode official site 으로 접속해 자신의 os 에 맞는 실행 파일 .deb 을 받는다터미널에 다운로드 경로로 이동해 sudo apt install ./{file_name} 를 입력하여 설치를 진행한다터미널을 재실행 한 뒤 code 를 입력하면 vscode 가 켜진다 (혹은 그냥 vscode 를 검색해서 실행시킬 수 있다)"
  },
  
  {
    "title": "우분투 환경 세팅 (2)",
    "url": "/posts/ubuntu-env-setting-2/",
    "categories": "Ubuntu, Ananconda",
    "tags": "ubuntu, anaconda",
    "date": "2023-03-11 00:00:00 +0900",
    





    
    "snippet": "설치 환경  Geforce 3090  Ubuntu 20.04 LTSAnaconda 설치Anaconda official site 를 통해 자신의 os 에 맞는 버전을 선택해 다운로드 받는다파일이 다운로드 된 경로로 이동해 설치를 진행하기 전 sha256sum {file_name} 명령어를 통해 데이터 무결성을 검사한다해당 명령어를 입력하면 해시값이 나오...",
    "content": "설치 환경  Geforce 3090  Ubuntu 20.04 LTSAnaconda 설치Anaconda official site 를 통해 자신의 os 에 맞는 버전을 선택해 다운로드 받는다파일이 다운로드 된 경로로 이동해 설치를 진행하기 전 sha256sum {file_name} 명령어를 통해 데이터 무결성을 검사한다해당 명령어를 입력하면 해시값이 나오는데 이를 복사한뒤 Hashes for all files 접속해 복사한 해시값이 있는지 확인한다해시값이 있는지 확인이 되면 bash {file_name} 혹은 ./{file_name} 를 통해 .sh 파일을 실행해 설치를 진행한다파일을 실행하면 Terms and conditions 등이 지나간 뒤 설치 경로를 지정해주고 (enter 를 누르면 default, 다른 경로 지정은 직접 입력) &lt;/br&gt;설치를 좀 더 진행하면 [yes|no] 를 선택하라는 문구가 나오는데 yes 를 선택한다(no 를 선택하면 아나콘다 환경에서 쉘 스크립트를 수정할 수 없다)Anaconda Prompt 사용 설정아나콘다를 설치하더라도 바로 conda 명령어 (e.g. conda create, conda env list, conda instal, …) 가 먹히지 않는다ananconda prompt 를 사용하기 위해선 vim ~/.bashrc 를 통해 맨 아래줄에 해당 명령어를 추가해준다  export PATH=~/ananconda3/bin:~/ananconda3/condabin:$PATHsource ~/.bashrc 입력 후 터미널을 껐다 키면 앞에 (base) 가 붙는다Anaconda prompt 자동 실행 옵션 해제conda config --set auto_activate_base False 를 터미널에 입력 후 껐다키면 (base) 가 사라진다(터미널 실행 시 자동으로 Anaconda prompt 가 실행 되는 것을 방지)anaconda prompt 를 실행하기 위해선 conda acitvate 를 입력하면 앞에 켜지고 conda deactivate 를 입력하면 꺼진다"
  },
  
  {
    "title": "우분투 환경 세팅 (1)",
    "url": "/posts/ubuntu-env-setting-1/",
    "categories": "Ubuntu",
    "tags": "ubuntu, cuda, cudnn",
    "date": "2023-03-09 00:00:00 +0900",
    





    
    "snippet": "설치 환경  Geforce 3090  Ubuntu 20.04 LTSpre-setting그래픽 드라이버를 설치하기 전 필요한 패키지들을 먼저 설치해준다sudo apt-get update &amp;&amp; sudo apt-get upgrade -ysudo apt-get install openssh-serversudo apt-get install net-...",
    "content": "설치 환경  Geforce 3090  Ubuntu 20.04 LTSpre-setting그래픽 드라이버를 설치하기 전 필요한 패키지들을 먼저 설치해준다sudo apt-get update &amp;&amp; sudo apt-get upgrade -ysudo apt-get install openssh-serversudo apt-get install net-toolssudo apt-get install build-essentialsudo apt-get install manpages-devgcc -V 으로 gcc 컴파일러 설치 확인 (이후에 CUDA 설치할 때 필요)그래픽 드라이버 확인 및 설치터미널에 ubuntu-drivers devices 를 입력하면 현재 그래픽카드와 os 에 맞는 그래픽 드라이버들이 출력 된다sudo apt-get install nvidia-driver-autoinstall 는 권장설치 sudo apt-get install nvidia-driver-{version} 는 본인이 원하는 버전을 수동으로 설치한다나는 515 버전을 설치했다 sudo apt-get install nvidia-driver-515CUDA 설치cuda-toolkit-archive 링크로 접속해 원하는 버전의 자신의 os 에 맞는 CUDA 를 받는다나는 Linux -&gt; x86_64 -&gt; Ubuntu -&gt; 20.04 -&gt; runfile(local) 을 통해 파일을 받았다.deb 파일로도 받을 수 있고 network 를 통해서 설치할 수 있다설치 방법은 nvidia 홈페이지에 나와있는 대로 실행하면 된다CUDA 11.7, 그래픽드라이버 515 기준 wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux.runcd ~/Downloadssudo sh cuda_11.7.0_515.43.04_linux.run참고로 파일을 실행한 다음 설치 할 파일들을 선택할 수 있는 창이 뜨는데, 이 때 그래픽 드라이버는 위에서 이미 설치를 했기 때문에 선택을 해제하고 설치를 마저 진행하면 된다cuDNN 설치cudnn-archive 링크로 접속해 본인의 상황에 맞는 cuDNN 을 다운로드 받는다nvidia 계정을 요구하므로 가입하고 진행하면 된다다운로드가 완료 되면 파일이 있는 위치로 가 압축파일을 해제한다tar.gz 파일은 tar xvzf {file_name} 명령어로tar 파일은 tar xvf {file_name} 명령어로 해제한다압축을 해제하면 해당 폴더 안으로 들어간뒤 폴더 내의 내용물들을 전부 CUDA 가 설치 된 위치에 복사하면 된다같은 이름의 파일이 있다고 할텐데 replace 시켜주면 된다sudo cp ./{cuDNN dir}/include/* /usr/local/{cuda dir}/includesudo cp ./{cuDNN dir}/lib64/* /usr/local/{cuda dir}/lib64sudo chmod a+r /usr/local/{cuda dir}/lib64/libcudnn*환경변수 설정위에서 모든 파일의 설치 및 복사가 완료 되었으면 다음은 컴퓨터의 어떤 경로에서든지 CUDA 와 cuDNN 을 참조할 수 있도록 환경 변수를 설정한다vi 이나 vim 편집기로 파일을 열어주면 되는데, 없다면 sudo apt-get install vim 등을 이용하여 먼저 설치해준다vim ~/.bashrc 로 파일을 열어준 뒤export PATH=/usr/local/{cuda-version}/bin${PATH:+:${PATH}}export LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}를 파일 제일 아래에 추가해 준다(vim 에서 문서를 처음 편집하려고 할 때 아무것도 입력이 안 되는데 이는 vim 의 명령어 모드이기 때문이다. i, o, a 등의 명령어로 입력 모드로 변경한 뒤 입력해주고 esc 를 눌러 다시 명령어 모드로 바꾸고 :wq 를 입력하여 최종적으로 입력 내용을 저장한다)source ~/.bashrc 를 입력하여 해당 내용이 적용 될 수 있도록 한다설치 확인nvidia-smi 와 nvcc -V 혹은 nvcc --version 을 입력하여 그래픽 드라이버와 CUDA 가 잘 설치 되었는지를 확인하면 된다참고로 nvidia-smi 에서 출력 되는 드라이버는 현재 설치 된 드라이버가 아닌 최신 드라이버이므로 혼동하면 안 된다"
  }
  
]

