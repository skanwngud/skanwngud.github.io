

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>오답노트</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2023-03-20T22:47:26+09:00</updated>
  <author>
    <name>JuHyeong Yoo</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 JuHyeong Yoo </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>숫자와 문자가 혼합 된 문자열에서 숫자만 찾기</title>
    <link href="http://localhost:4000/posts/find-number-in-string/" rel="alternate" type="text/html" title="숫자와 문자가 혼합 된 문자열에서 숫자만 찾기" />
    <published>2023-03-20T00:00:00+09:00</published>
  
    <updated>2023-03-20T21:43:28+09:00</updated>
  
    <id>http://localhost:4000/posts/find-number-in-string/</id>
    <content src="http://localhost:4000/posts/find-number-in-string/" />
    <author>
      <name>yjh</name>
    </author>

  
    
  

  
    <summary>
      





      Summary
a_1, 100_a 등과 같은 문자 + 숫자 조합의 문자열에서 숫자 정보만 반환한다.

Source Code
import re

int(''.join(re.findall('\d', string)))


Explanation
import re


re 라이브러리를 임포트해준다.

re 라이브러니는 정규화 관련 함수들이 들어있는 라이브러리이다.

짧은 한 줄의 코드를 굳이 구분을 짓자면 re.findall('\d', string), ''.join(), int() 이렇게 3개로 나눌 수 있는데,

re.findall('\d', string)


이 코드는 string 이라는 문자열 안에 있는 숫자 ('\d') 를 전부 찾아내 리스트 형태로 반환한다.

''.join()


괄호 안에 있는 it...
    </summary>
  

  </entry>

  
  <entry>
    <title>UML</title>
    <link href="http://localhost:4000/posts/UML-1/" rel="alternate" type="text/html" title="UML" />
    <published>2023-03-20T00:00:00+09:00</published>
  
    <updated>2023-03-20T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/UML-1/</id>
    <content src="http://localhost:4000/posts/UML-1/" />
    <author>
      <name>yjh</name>
    </author>

  
    
    <category term="UML" />
    
  

  
    <summary>
      





      UML

  소스코드를 도형 및 화살표 등으로 기능을 설명함


종류

  정적인 부분
    
      단순 코드 나열하여 기능 설명
    
  
  동적인 부분
    
      sequence diagram, 소스코드의 flow 를 설명함
    
  


구조
Class Diagram (정적)

  Life Ccle 을 관리하면 UML 화살표 상에서 검은색으로 칠함
  Association (상관 관계)
    
      양방향
      단반향
      Recursive (design pattern 등에서 자주 사용)
      Inner class; a 클래스가 b 클래스 안에서 선언 되어 사용
      Dependancy; a 클래스의 내부의 함수에서 b 클래스가 사용 됨 (a ...
    </summary>
  

  </entry>

  
  <entry>
    <title>컴퓨터 구조 (3)</title>
    <link href="http://localhost:4000/posts/computer-structure-3/" rel="alternate" type="text/html" title="컴퓨터 구조 (3)" />
    <published>2023-03-16T00:00:00+09:00</published>
  
    <updated>2023-03-16T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/computer-structure-3/</id>
    <content src="http://localhost:4000/posts/computer-structure-3/" />
    <author>
      <name>yjh</name>
    </author>

  
    
    <category term="Computer Science" />
    
  

  
    <summary>
      





      실수를 표현하는 방법

고정소수점 표현법


  2진 소수점의 위치를 임의로 정하는 방법
  4비트가 있다고했을 때 2비트는 소수점의 오른쪽에 있는 분수를 표현하고 2비트는 왼쪽에 있는 숫자들을 표현하는데 쓸 수 있다.
    
      2비트 = 분수, 2비트 = 정수 표시
      
        정수를 나타내는 비트는 동일하며 분수를 나타내는 비트는 2의 음의 거듭제곱처럼 나타낸다

\[2^1 + 2^0 \, . 2^{-1} + 2^{-2}\]
      
    
  
  해당 방법은 실수값을 표현하기 위해 필요한 비트가 너무 많기 때문에 범용 컴퓨터에서 사용하는 경우는 드물지만, 디지털 신호 처리 장치 (DSP; Digital Signal Processor) 에선 종종 사용.


부동소수점...
    </summary>
  

  </entry>

  
  <entry>
    <title>컴퓨터 구조 (2)</title>
    <link href="http://localhost:4000/posts/computer-structure-2/" rel="alternate" type="text/html" title="컴퓨터 구조 (2)" />
    <published>2023-03-15T00:00:00+09:00</published>
  
    <updated>2023-03-15T22:09:47+09:00</updated>
  
    <id>http://localhost:4000/posts/computer-structure-2/</id>
    <content src="http://localhost:4000/posts/computer-structure-2/" />
    <author>
      <name>yjh</name>
    </author>

  
    
    <category term="Computer Science" />
    
  

  
    <summary>
      





      비트를 사용해 정수를 표현하기
정수 표현
실생활의 우리가 주로 사용하고 있는 수는 10 진수demical number이다.

0 ~ 9 까지를 한 자리에 나타낼 수 있으며  9를 넘는 수는 10 을 곱하여 다시 시작한다.

이때 자릿수가 커짐에 따라 10 의 거듭제곱으로 커지게 되며, 지수 부분이 적용 될 밑수base-number 가 10 이기 때문에 10진수라는 이름이 붙여졌다.

이와 마찬가지로 2진수는 0 ~ 1 까지를 한 자리에 나타낼 수 있는 셈법이며 1 을 초과하는 수를 나타낼 땐 2 를 곱하여 다시 시작한다.

자릿수가 바뀔 때마다 2 의 거듭제곱순으로 커지게 되며, 밑수가 2 이기 때문에 2 진수라는 이름이 붙었다.


  10진수: \(... 10^5 + 10^4 + 10^3 + 10^...
    </summary>
  

  </entry>

  
  <entry>
    <title>배치리스트 만들기</title>
    <link href="http://localhost:4000/posts/make-batch-list/" rel="alternate" type="text/html" title="배치리스트 만들기" />
    <published>2023-03-14T00:00:00+09:00</published>
  
    <updated>2023-03-15T20:56:11+09:00</updated>
  
    <id>http://localhost:4000/posts/make-batch-list/</id>
    <content src="http://localhost:4000/posts/make-batch-list/" />
    <author>
      <name>yjh</name>
    </author>

  
    
    <category term="Python" />
    
    <category term="Snippet" />
    
  

  
    <summary>
      





      Summary
파일명이나 이미지 등이 들어가있는 리스트와 배치 사이즈를 입력 받아 그 리스트를 배치 단위로 잘라주는 함수이다.

Source Code
def make_batch_list(self, file_list: List[], batch_size: int) -&amp;gt; List[]:
    result_list = []

    for idx in range(0, len(file_list), batch_size):
        if idx + batch_size &amp;lt; len(file_list):
            result_list.append(file_list[idx:idx+batch_size])
        else:
            result_list.append(file_l...
    </summary>
  

  </entry>

</feed>


